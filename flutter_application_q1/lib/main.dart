import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:carousel_slider/carousel_slider.dart';
// TODO: Add your firebase_options.dart file after configuring Firebase
import 'firebase_options.dart'; // Make sure this file is generated by `flutterfire configure`

// region Main Function and Firebase Initialization
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // TODO: CRUCIAL - Initialize Firebase. Ensure you have firebase_options.dart
  // The user MUST uncomment and configure this section.
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform, // Ensure firebase_options.dart is imported
    );
    print("Firebase initialized successfully!");
  } catch (e) {
    print("Firebase initialization FAILED: $e. Ensure firebase_options.dart is set up correctly.");
    print("The app will show errors for Firebase-dependent features or may not function as expected.");
  }

  if (Firebase.apps.isEmpty) {
    print("--------------------------------------------------------------------");
    print("WARNING: Firebase is NOT INITIALIZED in main().");
    print("Please uncomment and configure Firebase.initializeApp() in main.dart");
    print("and ensure you have 'firebase_options.dart' from 'flutterfire configure'.");
    print("App sections relying on Firebase will show an error state.");
    print("--------------------------------------------------------------------");
  } else {
    print("Firebase appears to be initialized. Cubits will attempt to fetch data.");
  }

  runApp(const MyApp());
}
// endregion

// region Data Models (Same as before)
class BannerItem {
  final String id;
  final String titlePart1;
  final String titlePart2;
  final String subtitle;
  final String buttonText;
  final String offerText;
  final String imageUrl;

  BannerItem({
    required this.id,
    required this.titlePart1,
    required this.titlePart2,
    required this.subtitle,
    required this.buttonText,
    required this.offerText,
    required this.imageUrl,
  });

  factory BannerItem.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return BannerItem(
      id: doc.id,
      titlePart1: data['titlePart1'] ?? 'Shop with ',
      titlePart2: data['titlePart2'] ?? '100% cashback',
      subtitle: data['subtitle'] ?? 'On Shopee',
      buttonText: data['buttonText'] ?? 'I want!',
      offerText: data['offerText'] ?? 'Best offer!',
      imageUrl: data['imageUrl'] ?? 'https://via.placeholder.com/400x200.png?text=Banner+Image',
    );
  }
}

class CategoryItem {
  final String id;
  final String name;
  final String iconName;

  CategoryItem({required this.id, required this.name, required this.iconName});

  factory CategoryItem.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return CategoryItem(
      id: doc.id,
      name: data['name'] ?? 'Category',
      iconName: data['iconName'] ?? 'default',
    );
  }
}

class ProductItem {
  final String id;
  final String name;
  final String imageUrl;
  final String cashback;
  final bool isFavorite;

  ProductItem({
    required this.id,
    required this.name,
    required this.imageUrl,
    required this.cashback,
    this.isFavorite = false,
  });

  factory ProductItem.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return ProductItem(
      id: doc.id,
      name: data['name'] ?? 'Product Name',
      imageUrl: data['imageUrl'] ?? 'https://via.placeholder.com/150.png?text=Product',
      cashback: data['cashback'] ?? '0% cashback',
      isFavorite: data['isFavorite'] ?? false,
    );
  }
}
// endregion

// region Cubits and States (Simplified: Fetch Only)

// Banner Cubit
abstract class BannerState {}
class BannerInitial extends BannerState {}
class BannerLoading extends BannerState {}
class BannerLoaded extends BannerState {
  final List<BannerItem> banners;
  BannerLoaded(this.banners);
}
class BannerError extends BannerState {
  final String message;
  BannerError(this.message);
}

class BannerCubit extends Cubit<BannerState> {
  BannerCubit() : super(BannerInitial());

  Future<void> fetchBanners() async {
    emit(BannerLoading());
    if (Firebase.apps.isEmpty) {
      emit(BannerError("Firebase not initialized. Configure in main.dart."));
      return;
    }
    try {
      final snapshot = await FirebaseFirestore.instance.collection('banners').get();
      final banners = snapshot.docs.map((doc) => BannerItem.fromFirestore(doc)).toList();

      if (banners.isEmpty) {
        emit(BannerError("No banners found in Firestore. Please run the population script or check data."));
      } else {
        emit(BannerLoaded(banners));
      }
    } catch (e) {
      emit(BannerError("Failed to load banners: ${e.toString()}. Check Firestore permissions/data."));
    }
  }
}

// Category Cubit
abstract class CategoryState {}
class CategoryInitial extends CategoryState {}
class CategoryLoading extends CategoryState {}
class CategoryLoaded extends CategoryState {
  final List<CategoryItem> categories;
  CategoryLoaded(this.categories);
}
class CategoryError extends CategoryState {
  final String message;
  CategoryError(this.message);
}

class CategoryCubit extends Cubit<CategoryState> {
  CategoryCubit() : super(CategoryInitial());

  Future<void> fetchCategories() async {
    emit(CategoryLoading());
    if (Firebase.apps.isEmpty) {
      emit(CategoryError("Firebase not initialized. Configure in main.dart."));
      return;
    }
    try {
      // Fetching up to 5 categories as per UI
      final snapshot = await FirebaseFirestore.instance.collection('categories').limit(5).get();
      final categories = snapshot.docs.map((doc) => CategoryItem.fromFirestore(doc)).toList();

      if (categories.isEmpty) {
        emit(CategoryError("No categories found in Firestore. Please run the population script or check data."));
      } else {
        emit(CategoryLoaded(categories));
      }
    } catch (e) {
      emit(CategoryError("Failed to load categories: ${e.toString()}. Check Firestore permissions/data."));
    }
  }
}

// Popular Product Cubit
abstract class PopularProductState {}
class PopularProductInitial extends PopularProductState {}
class PopularProductLoading extends PopularProductState {}
class PopularProductLoaded extends PopularProductState {
  final List<ProductItem> products;
  PopularProductLoaded(this.products);
}
class PopularProductError extends PopularProductState {
  final String message;
  PopularProductError(this.message);
}

class PopularProductCubit extends Cubit<PopularProductState> {
  PopularProductCubit() : super(PopularProductInitial());

  Future<void> fetchPopularProducts() async {
    emit(PopularProductLoading());
    if (Firebase.apps.isEmpty) {
      emit(PopularProductError("Firebase not initialized. Configure in main.dart."));
      return;
    }
    try {
      final snapshot = await FirebaseFirestore.instance.collection('popular_products').get();
      final products = snapshot.docs.map((doc) => ProductItem.fromFirestore(doc)).toList();

      if (products.isEmpty) {
        emit(PopularProductError("No popular products found. Please run population script or check data."));
      } else {
        emit(PopularProductLoaded(products));
      }
    } catch (e) {
      emit(PopularProductError("Failed to load products: ${e.toString()}. Check Firestore permissions/data."));
    }
  }
}
// endregion

// region Main App Widget (MyApp) - Same as before
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider(create: (context) => BannerCubit()..fetchBanners()),
        BlocProvider(create: (context) => CategoryCubit()..fetchCategories()),
        BlocProvider(create: (context) => PopularProductCubit()..fetchPopularProducts()),
      ],
      child: MaterialApp(
        title: 'Shopping App',
        theme: ThemeData(
          primarySwatch: Colors.pink,
          primaryColor: Colors.pink.shade400,
          fontFamily: 'Inter',
          scaffoldBackgroundColor: const Color(0xFFF9EAF4),
        ),
        debugShowCheckedModeBanner: false,
        home: const HomeScreen(),
      ),
    );
  }
}
// endregion

// region HomeScreen Widget - Same as before, including _buildErrorWidget
class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _bottomNavIndex = 0;

  IconData _getIconData(String iconName) {
    switch (iconName) {
      case 'percent': return Icons.percent;
      case 'description_outlined': return Icons.description_outlined;
      case 'diamond_outlined': return Icons.diamond_outlined;
      case 'emoji_events_outlined': return Icons.emoji_events_outlined;
      case 'more_horiz': return Icons.more_horiz;
      default: return Icons.help_outline;
    }
  }

  Widget _buildErrorWidget(String message) {
    return Container(
      padding: const EdgeInsets.all(16.0),
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 20),
      decoration: BoxDecoration(
        color: Colors.red.shade100,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.red.shade300)
      ),
      child: Row(
        children: [
          Icon(Icons.error_outline, color: Colors.red.shade700),
          const SizedBox(width: 10),
          Expanded(child: Text(message, style: TextStyle(color: Colors.red.shade900))),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFFFDECF4), Color(0xFFF1EAF7)],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: SafeArea(
          bottom: false,
          child: Column(
            children: [
              _buildProfileHeader(),
              _buildSearchBar(),
              Expanded(
                child: SingleChildScrollView(
                  physics: const BouncingScrollPhysics(),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildCategoryList(),
                      const SizedBox(height: 24),
                      _buildCashbackBannerSection(),
                      const SizedBox(height: 24),
                      _buildPopularOffersSection(),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
      bottomNavigationBar: _buildBottomNavigationBar(),
    );
  }

  Widget _buildProfileHeader() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 16.0),
      child: Row(
        children: [
          const CircleAvatar(
            radius: 22,
            backgroundImage: CachedNetworkImageProvider('https://randomuser.me/api/portraits/men/75.jpg'),
          ),
          const SizedBox(width: 12),
          const Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Wilson Junior', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Color(0xFF333333))),
              Text('Premium', style: TextStyle(fontSize: 12, color: Colors.grey)),
            ],
          ),
          const Spacer(),
          IconButton(
            icon: Icon(Icons.card_giftcard_outlined, color: Colors.pink.shade300),
            onPressed: () { /* Static */ },
          ),
          IconButton(
            icon: Icon(Icons.notifications_none_outlined, color: Colors.pink.shade300),
            onPressed: () { /* Static */ },
          ),
        ],
      ),
    );
  }

  Widget _buildSearchBar() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 8.0),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16.0),
        decoration: BoxDecoration(
          color: const Color(0xFFF6EFF7),
          borderRadius: BorderRadius.circular(25.0),
        ),
        child: Row(
          children: [
            Icon(Icons.search, color: Colors.grey.shade600),
            const SizedBox(width: 10),
            Expanded(
              child: TextField(
                decoration: InputDecoration(
                  hintText: 'Search',
                  hintStyle: TextStyle(color: Colors.grey.shade600),
                  border: InputBorder.none,
                ),
                readOnly: true,
                onTap: () { /* Static */ },
              ),
            ),
            IconButton(
              icon: Icon(Icons.tune, color: Colors.pink.shade300),
              onPressed: () { /* Static */ },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCategoryList() {
    return BlocBuilder<CategoryCubit, CategoryState>(
      builder: (context, state) {
        if (state is CategoryLoading) {
          return const SizedBox(height: 110, child: Center(child: CircularProgressIndicator()));
        } else if (state is CategoryLoaded) {
          return Container(
            height: 110,
            padding: const EdgeInsets.symmetric(vertical:10.0),
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              physics: const BouncingScrollPhysics(),
              itemCount: state.categories.length,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              itemBuilder: (context, index) {
                final category = state.categories[index];
                return Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8.0),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Container(
                        width: 56,
                        height: 56,
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.7),
                          shape: BoxShape.circle,
                        ),
                        child: Icon(
                          _getIconData(category.iconName),
                          color: Theme.of(context).primaryColor,
                          size: 28,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        category.name,
                        style: TextStyle(fontSize: 11, color: Colors.grey.shade700, fontWeight: FontWeight.w500),
                        textAlign: TextAlign.center,
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ),
                );
              },
            ),
          );
        } else if (state is CategoryError) {
          return _buildErrorWidget(state.message);
        }
        return const SizedBox(height: 110, child: Center(child: Text('Initializing categories...'))); // Initial or unknown
      },
    );
  }

  Widget _buildCashbackBannerSection() {
    return BlocBuilder<BannerCubit, BannerState>(
      builder: (context, state) {
        if (state is BannerLoading) {
          return const SizedBox(height: 200, child: Center(child: CircularProgressIndicator()));
        } else if (state is BannerLoaded) {
          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20.0),
                child: Text(
                  '100 cashback', // This title is static in the UI
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.grey.shade800),
                ),
              ),
              const SizedBox(height: 12),
              CarouselSlider(
                options: CarouselOptions(
                  height: 160.0,
                  autoPlay: state.banners.length > 1,
                  enlargeCenterPage: false,
                  viewportFraction: 0.9, // Show one full banner and part of next if screen is wide enough
                  aspectRatio: 16 / 7,
                  enableInfiniteScroll: state.banners.length > 1,
                ),
                items: state.banners.map((banner) {
                  return Builder(
                    builder: (BuildContext context) {
                      return Container(
                        width: MediaQuery.of(context).size.width,
                        margin: const EdgeInsets.symmetric(horizontal: 5.0),
                        decoration: BoxDecoration(
                          gradient: const LinearGradient(
                            colors: [Color(0xFFEE83B4), Color(0xFFF3A2C6)],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                          borderRadius: BorderRadius.circular(16),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.pink.withOpacity(0.2),
                              spreadRadius: 1,
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            ),
                          ],
                        ),
                        child: Stack(
                          children: [
                            Positioned(
                              right: -20,
                              bottom: -10,
                              child: SizedBox(
                                width: 160,
                                height: 160,
                                child: CachedNetworkImage(
                                  imageUrl: banner.imageUrl,
                                  fit: BoxFit.contain,
                                  placeholder: (context, url) => const Center(child:SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white,))),
                                  errorWidget: (context, url, error) => const Icon(Icons.error, color: Colors.white),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.all(16.0),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  RichText(
                                    text: TextSpan(
                                      style: const TextStyle(fontSize: 18, color: Colors.white, fontFamily: 'Inter'),
                                      children: [
                                        TextSpan(text: banner.titlePart1),
                                        TextSpan(
                                          text: banner.titlePart2,
                                          style: const TextStyle(fontWeight: FontWeight.bold),
                                        ),
                                      ],
                                    ),
                                  ),
                                  Text(banner.subtitle, style: const TextStyle(fontSize: 12, color: Colors.white70)),
                                  const Spacer(),
                                  Row(
                                    children: [
                                      ElevatedButton(
                                        onPressed: () { /* Static */ },
                                        style: ElevatedButton.styleFrom(
                                          backgroundColor: Theme.of(context).primaryColor,
                                          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(20),
                                          ),
                                        ),
                                        child: Row( // Use banner.buttonText for dynamic text from Firestore if needed
                                          mainAxisSize: MainAxisSize.min,
                                          children: [
                                            Text(
                                              banner.buttonText, // Using text from Firestore
                                              style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                                            ),
                                            const SizedBox(width: 4),
                                            const Icon(Icons.arrow_forward, color: Colors.white, size: 18),
                                          ],
                                        ),
                                      ),
                                      const SizedBox(width: 16),
                                      Text(
                                        banner.offerText,
                                        style: TextStyle(fontSize: 12, color: Colors.white.withOpacity(0.9), fontWeight: FontWeight.w500),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      );
                    },
                  );
                }).toList(),
              ),
            ],
          );
        } else if (state is BannerError) {
          return _buildErrorWidget(state.message);
        }
        return const SizedBox(height: 200, child: Center(child: Text('Initializing banner...')));
      },
    );
  }

  Widget _buildPopularOffersSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 20.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Most popular offer', // This title is static in the UI
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.grey.shade800),
              ),
              TextButton(
                onPressed: () { /* Static */ },
                child: Text(
                  'See all',
                  style: TextStyle(fontSize: 14, color: Colors.grey.shade700, fontWeight: FontWeight.w500),
                ),
              ),
            ],
          ),
        ),
        const SizedBox(height: 12),
        BlocBuilder<PopularProductCubit, PopularProductState>(
          builder: (context, state) {
            if (state is PopularProductLoading) {
              return const SizedBox(height: 230, child: Center(child: CircularProgressIndicator()));
            } else if (state is PopularProductLoaded) {
              return SizedBox(
                height: 230, // Adjusted to fit content
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  physics: const BouncingScrollPhysics(),
                  itemCount: state.products.length,
                  padding: const EdgeInsets.only(left: 20, right: 12),
                  itemBuilder: (context, index) {
                    final product = state.products[index];
                    return _buildProductCard(product);
                  },
                ),
              );
            } else if (state is PopularProductError) {
              return _buildErrorWidget(state.message);
            }
            return const SizedBox(height: 230, child: Center(child: Text('Initializing products...')));
          },
        ),
      ],
    );
  }

  Widget _buildProductCard(ProductItem product) {
    return Container(
      width: 160,
      margin: const EdgeInsets.only(right: 12.0, bottom: 8.0, top: 4.0),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.15),
            spreadRadius: 1,
            blurRadius: 6,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 3,
            child: Stack(
              children: [
                ClipRRect(
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(12),
                    topRight: Radius.circular(12),
                  ),
                  child: CachedNetworkImage(
                    imageUrl: product.imageUrl,
                    width: double.infinity,
                    fit: BoxFit.cover,
                    placeholder: (context, url) => Center(child: SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2, color: Theme.of(context).primaryColor,))),
                    errorWidget: (context, url, error) => const Icon(Icons.image_not_supported, color: Colors.grey),
                  ),
                ),
                Positioned(
                  top: 8,
                  right: 8,
                  child: Icon(
                    product.isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: product.isFavorite ? Colors.red : Colors.grey.shade400,
                    size: 22,
                  ),
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Text(
                      product.cashback,
                      style: TextStyle(
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                        color: Colors.grey.shade700, // Dark grey as in UI
                      ),
                    ),
                    const SizedBox(width: 4),
                    Icon(
                      Icons.currency_exchange_outlined, // Icon next to cashback
                      color: Colors.grey.shade700,
                      size: 14,
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  product.name,
                  style: TextStyle(
                    fontSize: 13,
                    fontWeight: FontWeight.w500,
                    color: Colors.grey.shade800,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBottomNavigationBar() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            spreadRadius: 0,
            blurRadius: 10,
          ),
        ],
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        )
      ),
      child: BottomNavigationBar(
        currentIndex: _bottomNavIndex,
        onTap: (index) {
          setState(() {
            _bottomNavIndex = index;
          });
        },
        type: BottomNavigationBarType.fixed,
        backgroundColor: Colors.transparent,
        elevation: 0,
        selectedItemColor: const Color(0xFF333333),
        unselectedItemColor: Colors.grey.shade500,
        selectedLabelStyle: const TextStyle(fontWeight: FontWeight.w600, fontSize: 10),
        unselectedLabelStyle: const TextStyle(fontSize: 10),
        showUnselectedLabels: true,
        items: [
          BottomNavigationBarItem(
            icon: Icon(_bottomNavIndex == 0 ? Icons.home : Icons.home_outlined),
            label: 'Home',
          ),
          const BottomNavigationBarItem(
            icon: Icon(Icons.credit_card_outlined),
            label: 'Cards',
          ),
          const BottomNavigationBarItem(
            icon: Icon(Icons.qr_code_scanner_outlined),
            label: 'Pix',
          ),
          const BottomNavigationBarItem(
            icon: Icon(Icons.description_outlined),
            label: 'Notes',
          ),
          const BottomNavigationBarItem(
            icon: Icon(Icons.receipt_long_outlined),
            label: 'Extract',
          ),
        ],
      ),
    );
  }
}
// endregion

/*
 TODO for USER (VERY IMPORTANT - READ CAREFULLY):

 1. SET UP FIREBASE IN FLUTTER:
    - Create a Firebase project.
    - Add a Flutter app to your Firebase project (follow Firebase console instructions for Android/iOS/Web).
    - Run `flutterfire configure` in your Flutter project root. This will generate `lib/firebase_options.dart`.
    - **IMPORT `firebase_options.dart`** at the top of this `main.dart` file:
      `import 'firebase_options.dart';`
    - **UNCOMMENT and USE the `Firebase.initializeApp` block** in the `main()` function.

 2. POPULATE FIRESTORE USING THE JAVASCRIPT SCRIPT:
    - Follow the instructions in "Part 1: JavaScript (Node.js) Script to Populate Firestore" above.
    - Ensure you have your `serviceAccountKey.json` and run `node populate.js`.
    - Verify in the Firebase console that the collections (`banners`, `categories`, `popular_products`) are created and contain data.

 3. RUN THE FLUTTER APP:
    - After completing steps 1 and 2, run your Flutter app.
    - The app will:
        - Check if Firebase is initialized in `main()`. If not, Cubits will show an error.
        - If initialized, Cubits will attempt to fetch data directly from Firestore.
        - If data is not found in a collection (e.g., script wasn't run, or collection is empty), an error message specific to that section will be displayed.

 4. NOTES:
    - The section titles "100 cashback" and "Most popular offer" are hardcoded in the Flutter UI as they appear static in the design. The data *within* these sections (banners, products) is fetched.
    - The banner button text "I want!" is now being fetched from `banner.buttonText` (which is set in the JS script).
*/